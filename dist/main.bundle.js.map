{"version":3,"sources":["D:/wamp64/www/chat-angular/src/$_lazy_route_resource lazy","D:/wamp64/www/chat-angular/src/app/app.component.css","D:/wamp64/www/chat-angular/src/app/app.component.html","D:/wamp64/www/chat-angular/src/app/app.component.ts","D:/wamp64/www/chat-angular/src/app/app.module.ts","D:/wamp64/www/chat-angular/src/app/services/messages.service.ts","D:/wamp64/www/chat-angular/src/environments/environment.ts","D:/wamp64/www/chat-angular/src/main.ts","ws (ignored)"],"names":[],"mappings":"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","file":"main.bundle.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"../../../../../src/$$_lazy_route_resource lazy recursive\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// D:/wamp64/www/chat-angular/src/$$_lazy_route_resource lazy\n// module id = ../../../../../src/$$_lazy_route_resource lazy recursive\n// module chunks = main","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// D:/wamp64/www/chat-angular/src/app/app.component.css\n// module id = ../../../../../src/app/app.component.css\n// module chunks = main","module.exports = \"<div id=\\\"container\\\">\\n  <div id=\\\"container-messages\\\" #scrollMe [scrollTop]=\\\"scrollMe.scrollHeight\\\">\\n    <div *ngFor=\\\"let message of messages;\\\" class=\\\"message\\\" [ngClass]=\\\"{'my-message':message.username==myMessage.username}\\\">\\n      <img class=\\\"message-avatar\\\" [src]=\\\"message.avatar\\\">\\n      <div class=\\\"message-content\\\">\\n        <span class=\\\"message-content-username\\\">{{message.username}}</span>\\n        <p class=\\\"message-content-text\\\">{{message.content}}</p>\\n        <span class=\\\"message-content-time\\\">{{message.date}}</span>\\n      </div>\\n    </div>\\n  </div>\\n  <div id=\\\"container-actions\\\">\\n    <textarea [(ngModel)]=\\\"myMessage.content\\\" placeholder=\\\"Please enter text\\\"></textarea>\\n    <input type=\\\"submit\\\" value=\\\"Send\\\" (click)=\\\"sendMessage($event)\\\">\\n  </div>\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// D:/wamp64/www/chat-angular/src/app/app.component.html\n// module id = ../../../../../src/app/app.component.html\n// module chunks = main","import { Component, OnInit } from '@angular/core';\nimport * as io from 'socket.io-client';\n\n// interfaces\nimport { Message } from './interfaces/message';\n\n// services\nimport { MessagesService } from './services/messages.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n  providers: [MessagesService]\n})\nexport class AppComponent implements OnInit {\n  socket;\n  numberOfOnlineUsers: number;\n  messages: Message[] = [];\n  myMessage: Message = {\n    content: null,\n    username: null,\n    date: null,\n    avatar: null\n  }\n\n  constructor(private messagesService: MessagesService) {\n    this.socket = io();\n  }\n\n  // init function\n  public ngOnInit() {\n    // get all messages from localstorege\n    // this.messages = this.messagesService.getMessages();\n\n    // listen on number of online users\n    this.socket.on('numberOfOnlineUsers', (numberOfOnlineUsers) => {\n      this.numberOfOnlineUsers = numberOfOnlineUsers;\n      // update my message username and avatar\n      if (!this.myMessage['username']) this.myMessage['username'] = 'guest' + (this.numberOfOnlineUsers ? this.numberOfOnlineUsers : '');\n      if (!this.myMessage['avatar']) this.myMessage['avatar'] = 'assets/images/avatars/' + (Math.floor(Math.random() * (10 - 1)) + 1) + '.jpg';\n    });\n\n    // listen on update messages\n    this.socket.on('updateMessages', (message) => {\n      this.messages.push(message);\n    });\n  }\n\n  // send message function\n  public sendMessage(e) {\n    e.preventDefault();\n\n    // update my message date\n    let d = new Date;\n    this.myMessage['date'] = [d.getDate(),\n    d.getMonth() + 1,\n    d.getFullYear()].join('/') + ' ' +\n      [d.getHours(),\n      d.getMinutes(),\n      d.getSeconds()].join(':');\n\n    // emit to create message\n    this.socket.emit('createMessage', this.myMessage);\n\n    // save message in localstorege\n    // this.messagesService.saveMessage(this.myMessage);\n\n    // reset my message content\n    this.myMessage['content'] = null;\n  }\n}\n\n\n// WEBPACK FOOTER //\n// D:/wamp64/www/chat-angular/src/app/app.component.ts","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport {FormsModule} from \"@angular/forms\";\n\n\n\nimport { AppComponent } from './app.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n\n// WEBPACK FOOTER //\n// D:/wamp64/www/chat-angular/src/app/app.module.ts","import { Injectable } from '@angular/core';\nimport { Message } from '../interfaces/message';\n\n@Injectable()\nexport class MessagesService {\n  messages: Message[] = [];\n\n  constructor() { }\n\n  getMessages() {\n    // let messagesLocalStorege = localStorage.getItem('messages');\n    // if (messagesLocalStorege) this.messages = JSON.parse(messagesLocalStorege);\n    return this.messages;\n  }\n\n  saveMessage(message) {\n    this.messages.push(message);\n    // localStorage.setItem('messages', JSON.stringify(this.messages));\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// D:/wamp64/www/chat-angular/src/app/services/messages.service.ts","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n\n\n\n// WEBPACK FOOTER //\n// D:/wamp64/www/chat-angular/src/environments/environment.ts","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n\n\n\n// WEBPACK FOOTER //\n// D:/wamp64/www/chat-angular/src/main.ts","/* (ignored) */\n\n\n//////////////////\n// WEBPACK FOOTER\n// ws (ignored)\n// module id = 1\n// module chunks = main"],"sourceRoot":"webpack:///"}